#!/usr/bin/env node

const config = require('@bedrockio/config');
const logger = require('@bedrockio/logger');
const { initialize } = require('../../src/utils/database');
const { loadFixtures } = require('../../src/utils/fixtures');
const readline = require('readline');

// Ensure models are loaded.
require('../../src/models');

const ENV_NAME = config.get('ENV_NAME');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

const allowedEnvironments = ['test', 'development', 'staging'];

function prompt(message) {
  return new Promise((resolve) => {
    rl.question(message, (answer) => {
      resolve(answer);
      rl.close();
    });
  });
}

(async () => {
  if (!allowedEnvironments.includes(ENV_NAME)) {
    throw new Error(`Not allowed in ENV_NAME other than ${allowedEnvironments.join(', ')} (ENV_NAME=${ENV_NAME})`);
  }
  logger.warn(`
----------------------------------------------------------------------

  Warning: This will delete ALL DATA for the ${ENV_NAME} environment

----------------------------------------------------------------------

`);
  const answer = await prompt('Are you sure sure? [y|n] ');
  if (answer.toLowerCase() !== 'y') {
    logger.error('Aborted.');
    process.exit(1);
  }
  const db = await initialize();
  logger.info(`Dropping database...`);
  await db.dropDatabase();
  const result = await loadFixtures();
  if (!result) {
    logger.info('No DB fixtures to load, database is populated');
  } else {
    logger.info('Done! Fixtures have been reloaded.');
  }
  process.exit(0);
})();
