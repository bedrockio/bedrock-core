#!/bin/bash
source ./deployment/scripts/parse_opts
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
cd $SCRIPTPATH; cd ../../
PLATFORM_NAME=$(basename `pwd`)

ENVIRONMENT=$(parse_arg $1)
SERVICE=$(parse_arg $2)
SUB_SERVICE=$(parse_arg $3)
parse_opts $@

if [ "$ENVIRONMENT" == "" ] || [ "$SERVICE" == "" ]; then
cat <<-EOM
  Usage: deploy <environment> <service> [sub_service]

  Builds and pushes the docker image for the current app state, then
  rolls out a deployment. Optionally creates a new feature branch.

  Options:

    --feature=name:

      This flag will tag the docker image with the feature name and
      create a new service for it if one does not exist, updating the
      ingress rules as needed. Feature branches will be accessible as
      a subdomain.

    --api=name:

      When deploying a feature on web, this flag will set the subdomain
      of API_URL "api-name." instead of "api.". This allows the web app
      to depend on a different feature branch in the api.

EOM
exit 1
fi

if [ "$ENVIRONMENT" == "production" ] && [ "$opt_feature" != "" ]; then
  echo "Feature branches are disabled for production!"
  exit 1
fi

./deployment/scripts/warn $ENVIRONMENT
if [ $? -ne 0 ]; then
  exit 1
fi

./deployment/scripts/build $SERVICE "$SUB_SERVICE" $opt_feature
./deployment/scripts/push $ENVIRONMENT $SERVICE "$SUB_SERVICE" $opt_feature

if [ "$opt_feature" != "" ]; then
  DEPLOYMENT="$SERVICE-$opt_feature-deployment"
  ./deployment/scripts/create_feature_branch $ENVIRONMENT $SERVICE $opt_feature $opt_api
elif [ "$SUB_SERVICE" != "" ]; then
  DEPLOYMENT="$SERVICE-$SUB_SERVICE-deployment"
else
  DEPLOYMENT="$SERVICE-deployment"
fi

./deployment/scripts/rollout $ENVIRONMENT $DEPLOYMENT
