#!/bin/bash
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
cd $SCRIPTPATH; cd ../../
ENVIRONMENT=$1
DEPLOYMENT=$2

if [ "$ENVIRONMENT" == "" ] || [ "$DEPLOYMENT" == "" ]; then
cat <<-EOM
  Usage: rollout <environment> <deployment>

  Rollout a deployment. This will re-apply the yaml configuration
  and patch the current deployment with metadata. Use the deploy_info
  script to see metadata for the current rollout.
EOM
exit 1
fi

./deployment/scripts/check_gcloud_config $ENVIRONMENT 1
if [ $? -ne 0 ]; then
  exit 1
fi

function rollout() {
  echo "Rolling out $ENVIRONMENT $DEPLOYMENT"

  # Check for config file as it might not exist if the
  # deployment was dynamically created for a feature branch.
  file="deployment/$ENVIRONMENT/services/$DEPLOYMENT.yml"
  if [ -f "$file" ]; then
    kubectl apply -f $file --record
  fi

  # Patching spec.template forces the container to pull the latest image and
  # perform a rolling update as long as imagePullPolicy: Always is specified.
  kubectl patch deployment $DEPLOYMENT -p "$(get_metadata)" --record
}

function get_metadata() {
  author=$(git config user.name)
  date=$(date)
  fields="\"author\":\"$(git config user.name)\""
  fields="$fields,\"date\":\"$(date)\""
  fields="$fields,\"branch\":\"$(git branch --show-current)\""
  fields="$fields,\"git\":\"$(tag)\""
  echo "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{$fields}}}}}"
}

function tag() {
  tag=`git tag --points-at HEAD`
  if [ "$tag" == "" ]; then
    tag=`git rev-parse --short --verify HEAD`
  fi
  if [[ $(git diff --stat) != '' ]]; then
    tag="$tag-dirty"
  fi
  echo $tag
}

rollout
